---
version: "3.7"

x-restart-policy:
  &restart-policy
  restart_policy:
    condition: on-failure
    delay: 30s
    max_attempts: 3
    window: 30s

x-rollback-config:
  &rollback-config
  rollback_config:
    parallelism: 1
    delay: 30s
    failure_action: continue
    monitor: 60s
    max_failure_ratio: 1
    order: stop-first

x-update-config:
  &update-config
  update_config:
    parallelism: 1
    delay: 30s
    failure_action: pause
    monitor: 60s
    max_failure_ratio: 1
    order: stop-first

networks:

  tomfi_traccar_net:
    driver: overlay
    labels:
      info.tomfi.schemas.docker.network.name: "Traccar network."
      info.tomfi.schemas.docker.network.description: "Use for internal services interacting with Traccar."
    name: tomfi_traccar_net
    driver_opts:
      com.docker.network.driver.mtu: 1400

  tomfi_qbittorrent_net:
    driver: overlay
    labels:
      info.tomfi.schemas.docker.network.name: "Qbittorrent network."
      info.tomfi.schemas.docker.network.description: "Use for internal services interacting with Qbittorrent."
    name: tomfi_qbittorrent_net
    driver_opts:
      com.docker.network.driver.mtu: 1400

  tomfi_switcher_webapi_net:
    driver: overlay
    labels:
      info.tomfi.schemas.docker.network.name: "Switcher WebAPI network."
      info.tomfi.schemas.docker.network.description: "Use for internal services interacting with the Switcher WebAPI."
    name: tomfi_switcher_webapi_net
    driver_opts:
      com.docker.network.driver.mtu: 1400

  tomfi_mail_services_net:
    external: true

  tomfi_mariadb_net:
    external: true

services:

  rainloop:
    image: hardware/rainloop:1.13.0
    init: true
    env_file: env/.env_rainloop
    ports:
      - target: 8888
        published: 8888
        protocol: tcp
        mode: host
    volumes:
      - /opt/rainloop/data:/rainloop/data:rw
    networks:
      tomfi_mail_services_net:
      tomfi_mariadb_net:
    labels:
      info.tomfi.schemas.docker.container.name: "Rainloop mail client."
      info.tomfi.schemas.docker.container.description: "Rainloop mail client for use with seperated mail server."
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      labels:
        info.tomfi.schemas.docker.service.name: "Rainloop mail client."
        info.tomfi.schemas.docker.service.description: "Rainloop mail client for use with seperated mail server."
      placement:
        constraints:
          - node.hostname == docker_station
      <<: *restart-policy
      <<: *rollback-config
      <<: *update-config

  qbittorrent:
    image: linuxserver/qbittorrent:amd64-latest
    init: true
    env_file: env/.env_qbittorrent
    ports:
      - target: 8989
        published: 8989
        protocol: tcp
        mode: host
    volumes:
      - /downloads:/downloads:rw
      - /opt/qbittorrent:/config:rw
    networks:
      tomfi_qbittorrent_net:
    labels:
      info.tomfi.schemas.docker.container.name: "Qbittorrent."
      info.tomfi.schemas.docker.container.description: "Linuxserver's Qbittorrent."
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      labels:
        info.tomfi.schemas.docker.service.name: "Qbittorrent."
        info.tomfi.schemas.docker.service.description: "Linuxserver's Qbittorrent."
      placement:
        constraints:
          - node.hostname == docker_station
      <<: *restart-policy
      <<: *rollback-config
      <<: *update-config
    healthcheck:
      # yamllint disable-line rule:line-length
      test: ["CMD-SHELL", "curl --connect-timeout 15 --show-error --silent --fail --location \"http://localhost:8989\" > /dev/null || exit 1"]
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 0s

  traccar:
    image: <Redacted-Private-Repository>/tomerfi/traccar:custom_fix
    init: true
    ports:
      - target: 8082
        published: 8082
        protocol: tcp
        mode: host
      - target: 5055
        published: 5055
        protocol: tcp
        mode: host
    volumes:
      - /var/log/traccar:/opt/traccar/logs:rw
      - /opt/traccar/conf/traccar.xml:/opt/traccar/traccar.xml:ro
    networks:
      tomfi_traccar_net:
      tomfi_mariadb_net:
    labels:
      info.tomfi.schemas.docker.container.name: "Traccar platform."
      info.tomfi.schemas.docker.container.description: "Modern GPS tracking platform for tomfi home."
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      labels:
        info.tomfi.schemas.docker.service.name: "Traccar platform."
        info.tomfi.schemas.docker.service.description: "Modern GPS tracking platform for tomfi home."
      placement:
        constraints:
          - node.hostname == docker_station
      <<: *restart-policy
      <<: *rollback-config
      <<: *update-config
    healthcheck:
      # yamllint disable-line rule:line-length
      test: ["CMD-SHELL", "if [ $$(curl -L -o /dev/null -s -w %{http_code} http://localhost:8082) -eq 200 ]; then echo 'healthcheck OK'; exit 0; else echo 'healthcheck ERROR'; exit 1; fi"]
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 0s

  switcher:
    image: tomerfi/switcher_webapi:latest
    init: true
    env_file: env/.env_switcher
    ports:
      - target: 8000
        published: 3698
        protocol: tcp
        mode: host
    networks:
      tomfi_switcher_webapi_net:
    labels:
      info.tomfi.schemas.docker.service.name: "Switcher WebAPI."
      info.tomfi.schemas.docker.service.description: "Web API for controlling the Switcher device."
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      labels:
        info.tomfi.schemas.docker.service.name: "Switcher WebAPI."
        info.tomfi.schemas.docker.service.description: "Web API for controlling the Switcher device."
      placement:
        constraints:
          - node.hostname == docker_station
      <<: *restart-policy
      <<: *rollback-config
      <<: *update-config
    healthcheck:
      # yamllint disable-line rule:line-length
      test: ["CMD-SHELL", "if [ $$(curl -L -o /dev/null -s -w %{http_code} http://localhost:8000/switcher/get_state) -eq 200 ]; then echo 'healthcheck OK'; exit 0; else echo 'healthcheck ERROR'; exit 1; fi"]
      interval: 15m
      timeout: 10s
      retries: 3
      start_period: 0s
