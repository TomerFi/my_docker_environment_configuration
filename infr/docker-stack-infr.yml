---
version: '3.7'

x-restart-policy:
  &restart-policy
  restart_policy:
    condition: on-failure
    delay: 30s
    max_attempts: 3
    window: 30s

x-rollback-config:
  &rollback-config
  rollback_config:
    parallelism: 1
    delay: 30s
    failure_action: continue
    monitor: 60s
    max_failure_ratio: 1
    order: stop-first

x-update-config:
  &update-config
  update_config:
    parallelism: 1
    delay: 30s
    failure_action: pause
    monitor: 60s
    max_failure_ratio: 1
    order: stop-first

secrets:

  cf_api_email_secret:
    file: secrets/.secret_cf_api_email

  cf_api_key_secret:
    file: secrets/.secret_cf_api_key

  mqtt_test_user_secret:
    file: secrets/.secret_mqtt_test_user

  mqtt_test_password_secret:
    file: secrets/.secret_mqtt_test_password

configs:

  traefik_dashborad_htpasswd:
    file: /opt/traefik/.htpasswd

networks:

  tomfi_secure_docker_access:
    driver: overlay
    labels:
      info.tomfi.schemas.docker.network.name: "Docker socket access."
      info.tomfi.schemas.docker.network.description: "Use for accesing the docker socket securely. Instead of mounting /var/run/docker.sock use http://infr_securersocket:2375 as endpoint."
    name: tomfi_secure_docker_access
    driver_opts:
      com.docker.network.driver.mtu: 1400
      encrypted: "true"

  tomfi_traefik_proxy_net:
    driver: overlay
    labels:
      info.tomfi.schemas.docker.network.name: "Traefik proxy network."
      info.tomfi.schemas.docker.network.description: "Use for internal services interacting with Traefik proxy."
    name: tomfi_traefik_proxy_net
    driver_opts:
      com.docker.network.driver.mtu: 1400

  tomfi_nginx_proxy_net:
    driver: overlay
    labels:
      info.tomfi.schemas.docker.network.name: "Nginx proxy network."
      info.tomfi.schemas.docker.network.description: "Use for internal services interacting with Nginx proxy."
    name: tomfi_nginx_proxy_net
    driver_opts:
      com.docker.network.driver.mtu: 1400

  tomfi_mail_services_net:
    driver: overlay
    labels:
      info.tomfi.schemas.docker.network.name: "Mail services network."
      info.tomfi.schemas.docker.network.description: "Use for services that are a part of the mail infrastructure."
    name: tomfi_mail_services_net
    driver_opts:
      com.docker.network.driver.mtu: 1400

  tomfi_mosquitto_net:
    driver: overlay
    labels:
      info.tomfi.schemas.docker.network.name: "Mosquitto mqtt network."
      info.tomfi.schemas.docker.network.description: "Use for internal services interacting with Mosquitto mqtt."
    name: tomfi_mosquitto_net
    driver_opts:
      com.docker.network.driver.mtu: 1400

services:

  mailserver:
    image: tvial/docker-mailserver:latest
    init: true
    env_file: env/.env_mailserver
    ports:
      - target: 25
        published: 25
        protocol: tcp
        mode: host
      - target: 143
        published: 143
        protocol: tcp
        mode: host
      - target: 587
        published: 587
        protocol: tcp
        mode: host
      - target: 993
        published: 993
        protocol: tcp
        mode: host
    volumes:
      - /opt/mailserver/mail:/var/mail:rw
      - /opt/mailserver/mail-state:/var/mail-state:rw
      - /opt/mailserver/conf:/tmp/docker-mailserver:rw
      - /opt/.certs/cloudflare:/etc/certs/:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      tomfi_mail_services_net:
    labels:
      info.tomfi.schemas.docker.container.name: "TomFi mailserver."
      info.tomfi.schemas.docker.container.description: "Use for mail services backend."
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      labels:
        info.tomfi.schemas.docker.service.name: "TomFi mailserver."
        info.tomfi.schemas.docker.service.description: "Use for mail services backend."
      placement:
        constraints:
          - node.hostname == docker_station
      <<: *restart-policy
      <<: *rollback-config
      <<: *update-config

  securesocket:
    image: tecnativa/docker-socket-proxy:latest
    init: true
    env_file: env/.env_securesocket
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      tomfi_secure_docker_access:
    labels:
      info.tomfi.schemas.docker.container.name: "Secure docker socket access."
      info.tomfi.schemas.docker.container.description: "Tecnativa's solution for accessing the docker socket securely."
    deploy:
      endpoint_mode: vip
      mode: global
      labels:
        info.tomfi.schemas.docker.service.name: "Secure docker socket access."
        info.tomfi.schemas.docker.service.description: "Tecnativa's solution for accessing the docker socket securely."
      placement:
        constraints:
          - node.role == manager
      <<: *restart-policy
      <<: *rollback-config
      <<: *update-config

  traefik:
    image: traefik:1.7.17
    init: true
    configs:
      - source: traefik_dashborad_htpasswd
        target: /etc/traefik/.htpasswd
    secrets:
      - cf_api_email_secret
      - cf_api_key_secret
    environment:
      - CF_API_EMAIL_FILE=/run/secrets/cf_api_email_secret
      - CF_API_KEY_FILE=/run/secrets/cf_api_key_secret
    ports:
      - target: 8585
        published: 8585
        protocol: tcp
        mode: ingress
    volumes:
      - /opt/traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      - /opt/.certs/cloudflare:/certs:ro
      - /opt/traefik/acme/account:/etc/traefik/acme/account:rw
    networks:
      tomfi_secure_docker_access:
      tomfi_traefik_proxy_net:
    labels:
      info.tomfi.schemas.docker.container.name: "Traefik modern HTTP reverse proxy."
      info.tomfi.schemas.docker.container.description: "Use as reverse proxy for http services only."
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      labels:
        info.tomfi.schemas.docker.service.name: "Traefik modern HTTP reverse proxy."
        info.tomfi.schemas.docker.service.description: "Use as reverse proxy for http services only."
      placement:
        constraints:
          - node.hostname == docker_station
      <<: *restart-policy
      <<: *rollback-config
      <<: *update-config

  nginx:
    image: <Redacted-Private-Repository>/tomerfi/nginx_mail_proxy:0.1
    init: true
    volumes:
      - /opt/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /opt/nginx/conf.d:/etc/nginx/conf.d:ro
      - /opt/.certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      tomfi_nginx_proxy_net:
    labels:
      info.tomfi.schemas.docker.container.name: "Nginx reverse proxy."
      info.tomfi.schemas.docker.container.description: "Used as reverse proxy for published services."
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      labels:
        info.tomfi.schemas.docker.service.name: "Nginx reverse proxy."
        info.tomfi.schemas.docker.service.description: "Used as reverse proxy for published services."
      placement:
        constraints:
          - node.hostname == docker_station
      <<: *restart-policy
      <<: *rollback-config
      <<: *update-config

  mosquitto:
    image: eclipse-mosquitto:1.6.6
    init: true
    secrets:
      - mqtt_test_user_secret
      - mqtt_test_password_secret
    environment:
      - TESTING_USER_FILE=/run/secrets/mqtt_test_user_secret
      - TESTING_PASSWORD_FILE=/run/secrets/mqtt_test_password_secret
    ports:
      - target: 1883
        published: 1883
        protocol: tcp
        mode: host
    volumes:
      - /opt/mosquitto/config:/mosquitto/config:ro
      - /opt/mosquitto/data:/mosquitto/data:rw
      - /opt/mosquitto/log:/mosquitto/log:rw
    networks:
      tomfi_mosquitto_net:
    labels:
      info.tomfi.schemas.docker.container.name: "Mosquitto MQTT Broker."
      info.tomfi.schemas.docker.container.description: "MQTT broker for tomfi services."
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      labels:
        info.tomfi.schemas.docker.service.name: "Mosquitto MQTT Broker."
        info.tomfi.schemas.docker.service.description: "MQTT broker for tomfi services."
      placement:
        constraints:
          - node.hostname == docker_station
      <<: *restart-policy
      <<: *rollback-config
      <<: *update-config
    healthcheck:
      test: ["CMD-SHELL", "if ! mosquitto_sub -t '$$SYS/#' -C 1 -u $$(cat $$TESTING_USER_FILE) -P $$(cat $$TESTING_PASSWORD_FILE) | grep -q Error; then echo 'healthcheck OK'; exit 0; else echo 'healthcheck ERROR'; exit 1; fi"]
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 0s
