---
version: "3.7"

x-restart-policy:
  &restart-policy
  restart_policy:
    condition: on-failure
    delay: 30s
    max_attempts: 3
    window: 30s

x-rollback-config:
  &rollback-config
  rollback_config:
    parallelism: 1
    delay: 30s
    failure_action: continue
    monitor: 60s
    max_failure_ratio: 1
    order: stop-first

x-update-config:
  &update-config
  update_config:
    parallelism: 1
    delay: 30s
    failure_action: pause
    monitor: 60s
    max_failure_ratio: 1
    order: stop-first

networks:

  tomfi_scm_net:
    driver: overlay
    labels:
      info.tomfi.schemas.docker.network.name: "SCM network."
      info.tomfi.schemas.docker.network.description: "Use for segregating SCM, CI and CD services."
    name: tomfi_scm_net
    driver_opts:
      com.docker.network.driver.mtu: 1400

  tomfi_postgres_net:
    external: true

services:

  sonarqube:
    image: sonarqube:8.2-community
    env_file: env/.env_sonarqube
    ports:
      - target: 9000
        published: 4585
        protocol: tcp
        mode: host
    volumes:
      - /opt/sonarqube/data:/opt/sonarqube/data
      - /opt/sonarqube/logs:/opt/sonarqube/logs
      - /opt/sonarqube/extensions_8:/opt/sonarqube/extensions
    networks:
      tomfi_scm_net:
      tomfi_postgres_net:
    labels:
      info.tomfi.schemas.docker.container.name: "SonarQube."
      info.tomfi.schemas.docker.container.description: "Open source product for continuous inspection of code quality."
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      labels:
        info.tomfi.schemas.docker.service.name: "SonarQube."
        info.tomfi.schemas.docker.service.description: "Open source product for continuous inspection of code quality."
      placement:
        constraints:
          - node.hostname == docker_station
      <<: *restart-policy
      <<: *rollback-config
      <<: *update-config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000"]
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 0s

  shields:
    image: shieldsio/shields:next
    init: true
    env_file: env/.env_shields
    ports:
      - target: 80
        published: 4587
        protocol: tcp
        mode: host
    networks:
      tomfi_scm_net:
    labels:
      info.tomfi.schemas.docker.container.name: "Shields IO."
      info.tomfi.schemas.docker.container.description: "Service for concise, consistent, and legible badges in SVG and raster format."
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      labels:
        info.tomfi.schemas.docker.service.name: "Shields IO."
        info.tomfi.schemas.docker.service.description: "Service for concise, consistent, and legible badges in SVG and raster format."
      placement:
        constraints:
          - node.hostname == docker_station
      <<: *restart-policy
      <<: *rollback-config
      <<: *update-config
